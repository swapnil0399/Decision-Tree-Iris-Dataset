data("iris")
head(Zoo)
data("iris")
head(iris)
source('~/.active-rstudio-document')
head(mydataSet)
source('~/.active-rstudio-document')
head(mydataSet)
mydataSet <- data(iris)
head(mydataSet)
head(iris)
summary(iris)
dupli <- duplicated(iris)
which(dupli)
summary(clean.iris)
clean.iris <- unique(iris[complete.cases(iris),])
summary(clean.iris)
View(clean.iris)
tree_default <- rpart(. ~ Species, data = clean.iris)
tree_default <- rpart(type ~ . Species, data = clean.iris)
tree_default <- rpart(type ~ Species, data = clean.iris)
library(rpart)
tree_default <- rpart(. ~ Species, data = clean.iris)
tree_default <- rpart(~ Species, data = clean.iris)
tree_default <- rpart(~ Species, data = clean.iris)
tree_default <- rpart(type ~ ., data = clean.iris)
tree_default <- rpart(type ~ Species, data = clean.iris)
tree_default <- rpart(type ~ clean.iris$Species, data = clean.iris)
tree_default <- rpart(clean.iris$Species, data = clean.iris)
tree_default <- rpart(Species ~ ., data = clean.iris)
tree_default
rpart.plot(tree_default, extra = 2, under = TRUE, varlen=0, faclen=0)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(tree_default, extra = 2, under = TRUE, varlen=0, faclen=0)
head(predict(tree_default, iris))
pred <- predict(tree_default, iris, type="class")
head(pred)
confusion_table <- table(iris$Species, pred)
confusion_table
error <- sum(confusion_table)-correct
error
correct <- sum(diag(confusion_table))
correct
error <- sum(confusion_table)-correct
error
accuracy <- correct / (correct+error)
accuracy
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
s
accuracy(iris$Species, pred)
}
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
sum(diag(tbl))/sum(tbl)
}
accuracy(iris$Species, pred)
head(predict(tree_full, iris))
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
sum(diag(tbl))/sum(tbl)
}
accuracy(iris$Species, pred)
confusion_table
error
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
correct <- sum(diag(tbl))
error <- sum(tbl) - correct
accuracy <- sum(diag(tbl))/sum(tbl)
cat("Accuracy: ", accuracy * 100, "%\n")
cat("Resubmission Error: ", error)
}
accuracy(iris$Species, pred)
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
correct <- sum(diag(tbl))
error <- sum(tbl) - correct
accuracy <- sum(diag(tbl))/sum(tbl)
cat("Accuracy:", accuracy * 100, "%\n")
cat("Resubmission Error:", error)
}
accuracy(iris$Species, pred)
tree_full <- rpart(Species ~., data=iris, control=rpart.control(minsplit=2, cp=0))
rpart.plot(tree_full, extra = 2, under = TRUE,  varlen=0, faclen=0)
head(predict(tree_full, iris))
pred_full <- predict(tree_full, iris, type="class")
head(pred_full)
confusion_table_full <- table(iris$Species, pred_full)
confusion_table_full
correct_full <- sum(diag(confusion_table_full))
correct_full
error_full <- sum(confusion_table_full)-correct_full
error_full
accuracy_full <- correct_full / (correct_full+error_full)
accuracy_full
accuracy(iris$Species, pred_full)
confusion_table <- table(iris$Species, pred)
confusion_table
rpart.plot(tree_default, extra = 2, under = TRUE, varlen=0, faclen=0)
head(iris)
my_flower <- data.frame(Sepal.length = 6.1, Sepal.width = 2.6, Petal.length = 4.0, Petal.Width = 1.2, Species = NA)
my_flower
#Make a prediction using the default tree and full tree for my animal
predict(tree_default , my_flower, type = "class")
my_flower <- data.frame(Sepal.Length = 6.1, Sepal.Width = 2.6, Petal.Length = 4.0, Petal.Width = 1.2, Species = NA)
my_flower
#Make a prediction using the default tree and full tree for my animal
predict(tree_default , my_flower, type = "class")
n_train <- as.integer(nrow(iris)*.66)
n_train
train_id <- sample(1:nrow(iris), n_train)
head(train_id)
train <- iris[train_id,]   # training dataset
test <- iris[-train_id, colnames(iris) != "Species"] # testing dataset includes all columns except type
test_type <- iris[-train_id, "iris"]  #actual type for each animal in the test set
tree <- rpart(Species ~., data=train,control=rpart.control(minsplit=2)) # create a tree based on traing set
accuracy(train$Species, predict(tree_default, train, type="Species"))
accuracy(train$Species, predict(tree_default, train, type="Species"))
function (arg, choices, several.ok = FALSE)
{
if (missing(choices)) {
formal.args <- formals(sys.function(sysP <- sys.parent()))
choices <- eval(formal.args[[as.character(substitute(arg))]],
envir = sys.frame(sysP))
}
if (is.null(arg))
return(choices[1L])
else if (!is.character(arg))
stop("'arg' must be NULL or a character vector")
if (!several.ok) {
if (identical(arg, choices))
return(arg[1L])
if (length(arg) > 1L)
stop("'arg' must be of length 1")
}
else if (length(arg) == 0L)
stop("'arg' must be of length >= 1")
i <- pmatch(arg, choices, nomatch = 0L, duplicates.ok = TRUE)
if (all(i == 0L))
stop(gettextf("'arg' should be one of %s", paste(dQuote(choices),
collapse = ", ")), domain = NA)
i <- i[i > 0L]
if (!several.ok && length(i) > 1)
stop("there is more than one match in 'match.arg'")
choices[i]
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
accuracy(train$Species, predict(tree_default, train, type="Species"))
accuracy(train$Species,table(train$Species, predict(tree_default, train, type="Species")))
pred_train_n_test <- predict(tree_default, train, type="Species")
train
train
test
pred_train_n_test <- predict(tree, train, type="Species")
accuracy(train$type, predict(tree, train, type="class"))
tree
train
test
test_type
accuracy(train$Species, predict(tree, train, type="class"))
accuracy(test_type, predict(tree, test, type="class"))
train <- iris[train_id,]   # training dataset
test <- iris[-train_id, colnames(iris) != "Species"] # testing dataset includes all columns except type
test_type <- iris[-train_id, "iris"]  #actual type for each animal in the test set
tree <- rpart(Species ~., data=train,control=rpart.control(minsplit=2)) # create a tree based on traing set
accuracy(train$Species, predict(tree, train, type="class"))
accuracy(test_type, predict(tree, test, type="class"))
rpart.plot(tree, extra = 2, under = TRUE,  varlen=0, faclen=0)
accuracy(test_type, predict(tree, test, type="class"))
accuracy(train$Species, predict(tree, train, type="class"))
test_type
test_type <- iris[-train_id, "Species"]  #actual type for each animal in the test set
tree <- rpart(Species ~., data=train,control=rpart.control(minsplit=2)) # create a tree based on traing set
test_type
accuracy(train$Species, predict(tree, train, type="class"))
accuracy(test_type, predict(tree, test, type="class"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
# Predict the
head(predict(tree_default, iris))
source('~/.active-rstudio-document')
predict(tree_default , my_flower, type = "class")
predict(tree_full , my_flower, type = "class")
num_nodes <- 3
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
generalization_error
accuracy(clean.iris$Species, pred)
num_nodes <- 3
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
generalization_error * 100
# Plotting the tree
rpart.plot(tree_full, extra = 2, under = TRUE,  varlen=0, faclen=0)
train <- clean.iris[train_id,]   # training dataset
# Plotting the newly genrated tree
rpart.plot(tree, extra = 2, under = TRUE,  varlen=0, faclen=0)
cat("Generalization Error: ", generalization_error * 100, "\n")
num_nodes <- 5
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
cat("Generalization Error: ", generalization_error * 100, "\n")
accuracy(train$Species, predict(tree, train, type="class"))
source('~/.active-rstudio-document')
# Swapnil Agrawal | Assignment 2 | CS 4375.001
# load R packages
library(rpart)
library(rpart.plot)
# load data Sets
data(iris)
head(iris)
# Print summary of the data set
summary(iris)
# Clean data set
dupli <- duplicated(iris)
which(dupli)
clean.iris <- unique(iris[complete.cases(iris),])
# Create a default decision tree using rpart with Species as the predicting factor
tree_default <- rpart(Species ~ ., data = clean.iris)
tree_default
# Print the tree using rplot
rpart.plot(tree_default, extra = 2, under = TRUE, varlen=0, faclen=0)
# Predict the Species based on the tree
head(predict(tree_default, clean.iris))
# Store the predictions in pred
pred <- predict(tree_default, clean.iris, type="class")
head(pred)
# Creating confusion tables based on the predictions
confusion_table <- table(clean.iris$Species, pred)
confusion_table
# Accuracy function to calculate resubmission errror and accuracy
accuracy <- function(truth, prediction)
{
tbl <- table(truth, prediction)
correct <- sum(diag(tbl))
error <- sum(tbl) - correct
accuracy <- sum(diag(tbl))/sum(tbl)
cat("Accuracy:", accuracy * 100, "%\n")
cat("Resubmission Error:", error, "\n")
}
# Calculating accuracy and error using default tree
num_nodes <- 3
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
cat("Generalization Error: ", generalization_error * 100, "\n")
accuracy(clean.iris$Species, pred)
# Now creating full tree
# Creating full tree from clean iris data
tree_full <- rpart(Species ~., data=clean.iris, control=rpart.control(minsplit=2, cp=0))
# Plotting the tree
rpart.plot(tree_full, extra = 2, under = TRUE,  varlen=0, faclen=0)
head(predict(tree_full, clean.iris))
# Store the predictions in pred_full
pred_full <- predict(tree_full, clean.iris, type="class")
head(pred_full)
# Creating confusion table for the full tree
confusion_table_full <- table(clean.iris$Species, pred_full)
confusion_table_full
# Calculating error and accuracy for full tree
num_nodes <- 9
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
cat("Generalization Error: ", generalization_error * 100, "\n")
accuracy(clean.iris$Species, pred_full)
# Now creating a new flower whose species is versicolor
my_flower <- data.frame(Sepal.Length = 6.1, Sepal.Width = 2.6, Petal.Length = 4.0, Petal.Width = 1.2, Species = NA)
my_flower
#Make a prediction using the default tree and full tree for my flower
predict(tree_default , my_flower, type = "class")
predict(tree_full , my_flower, type = "class")
# Now predicting using holdout sample method
# Generating 2/3 data for training set
n_train <- as.integer(nrow(clean.iris)*.66)
n_train
# Random sampling for 66% values of iris dataset
train_id <- sample(1:nrow(clean.iris), n_train)
head(train_id)
train <- clean.iris[train_id,]   # training dataset
test <- clean.iris[-train_id, colnames(clean.iris) != "Species"] # testing dataset includes all columns except type
test_type <- clean.iris[-train_id, "Species"]  #actual type for each flower in the test set
tree <- rpart(Species ~., data=train,control=rpart.control(minsplit=2)) # create a tree based on traing set
# Plotting the newly genrated tree
rpart.plot(tree, extra = 2, under = TRUE,  varlen=0, faclen=0)
# Calculating error and accuracy for train using training data and testing data
num_nodes <- 5
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
cat("Generalization Error: ", generalization_error * 100, "\n")
accuracy(train$Species, predict(tree, train, type="class"))
num_nodes <- 3
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
generalization_error * 100
accuracy(test_type, predict(tree, test, type="class"))
train_id <- sample(1:nrow(clean.iris), n_train)
head(train_id)
train <- clean.iris[train_id,]   # training dataset
test <- clean.iris[-train_id, colnames(clean.iris) != "Species"] # testing dataset includes all columns except type
test_type <- clean.iris[-train_id, "Species"]  #actual type for each flower in the test set
tree <- rpart(Species ~., data=train,control=rpart.control(minsplit=2)) # create a tree based on traing set
# Plotting the newly genrated tree
rpart.plot(tree, extra = 2, under = TRUE,  varlen=0, faclen=0)
# Calculating error and accuracy for train using training data and testing data
num_nodes <- 5
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
cat("Generalization Error: ", generalization_error * 100, "\n")
accuracy(train$Species, predict(tree, train, type="class"))
num_nodes <- 3
generalization_error <- (sum(confusion_table) - sum(diag(confusion_table)) + num_nodes * 0.5)/sum(confusion_table)
generalization_error * 100
accuracy(test_type, predict(tree, test, type="class"))
install.packages("caret")
yes
install.packages("caret")
source('~/.active-rstudio-document')
source('~/Downloads/Machine Learning Online Stuff/Class/Assignment 2/Class Activity.R')
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
train_control
# Fit Naive Bayes Model
model <- train(Species~., data=iris, trControl=train_control, method="nb")
# Summarise Results
print(model)
library(caret)
data(iris)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
model <- train(Species~., data=iris, trControl=train_control, method="nb")
# Summarise Results
print(model)
library(caret)
data(iris)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
model <- train(Species~., data=iris, trControl=train_control, method="rpart")
# Summarise Results
print(model)
library(caret)
data(iris)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
model <- train(Species~., data=iris, trControl=train_control(method="cv"), method="rpart")
# Summarise Results
print(model)
source('~/Downloads/Machine Learning Online Stuff/Class/Assignment 2/Class Activity.R')
source('~/Downloads/Machine Learning Online Stuff/Class/Assignment 2/Class Activity.R')
source('~/Downloads/Machine Learning Online Stuff/Class/Assignment 2/Class Activity.R')
